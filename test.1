.hy
.SH NAME
.PP
\f[B]dmenu\f[R] - dynamic menu
.SH SYNOPSIS
.IP
.nf
\f[B]
dmenu|dmenu_run [ -bfiv ] [ -l lines ]
                [ -m monitor ] [ -p prompt ]
                [ -fn font ] [ -nb color ] [ -nf color ]
                [-L 0|1|2|3|4|5|6|7|8|tl|tc|tr|ml|mc|mr|bl|bc|br]
                [ -sb color ] [ -sf color ] [ -nhb color ]
                [ -nhf color ] [ -shb color ] [ -shf color ]
                [ -w windowid ]
\f[R]
.fi
.SH DESCRIPTION
.SS \f[B]dmenu\f[R]
.PP
is a dynamic menu for X, which reads a list of newline-separated items
from stdin.
When the user selects an item and presses Return, their choice is
printed to stdout and dmenu terminates.
Entering text will narrow the items to those matching the tokens in the
input.
.SS \f[B]dmenu_run\f[R]
.PP
is a script used by \f[B]dwm\f[R] which lists programs in the user\[cq]s
\f[B]$PATH\f[R] and runs the result in their \f[B]$SHELL\f[R].
.SH OPTIONS
.PP
\f[B]-b\f[R]
.PD 0
.P
.PD
dmenu appears at the bottom of the screen.
.PP
\f[B]-f\f[R]
.PD 0
.P
.PD
dmenu grabs the keyboard before reading \f[B]stdin\f[R] if not reading
from a tty.
This is faster, but will lock up X until stdin reaches end-of-file.
.PP
\f[B]-s\f[R]
.PD 0
.P
.PD
dmenu matches menu items case \f[I]sensitively\f[R].
.PP
\f[B]-l \fI<lines>\fP\f[R]
.PD 0
.P
.PD
dmenu lists items vertically, with the given number of lines.
.PP
\f[B]-h \fI<height>\fP\f[R]
.PD 0
.P
.PD
dmenu uses a menu line of at least \f[B]\fI<height>\fP\f[R] pixels tall, but
no less than 8.
.PP
\f[B]-x \fI<xoffset>\fP\f[R]
.PD 0
.P
.PD
dmenu is placed at this offset measured from the left side of the
monitor.
.PD 0
.P
.PD
Can be negative.
.PD 0
.P
.PD
If option \f[B]-m\f[R] is present, the measurement will use the given
monitor.
.PP
\f[B]-y  \fI<yoffset>\fP\f[R]
.PD 0
.P
.PD
dmenu is placed at this offset measured from the top of the monitor.
If the \f[B]-b\f[R] option is used, the offset is measured from the
bottom.
.PD 0
.P
.PD
Can be negative.
.PD 0
.P
.PD
If option \f[B]-m\f[R] is present, the measurement will use the given
monitor.
.PP
\f[B]-w  \fI<width>\fP\f[R]
.PD 0
.P
.PD
sets the width of the dmenu window.
.PP
\f[B]-L 0|1|2|3|4|5|6|7|8|tl|tc|tr|ml|mc|mr|bl|bc|br\f[R]
.PD 0
.P
.PD
Where to draw \f[B]dmenu\f[R].
Specify the same way as you would for \f[B]rofi\f[R], or the sane way.
.IP
.nf
\f[B]
1|tl 2|tc 3|tr
8|ml 0|mc 4|mr
7|bl 6|bc 5|br
\f[R]
.fi
.PP
\f[B]-m  \fI<monitor>\fP\f[R]
.PD 0
.P
.PD
dmenu is displayed on the monitor number supplied.
Monitor numbers are starting from 0.
.PP
\f[B]-p  \fI<prompt>\fP\f[R]
.PD 0
.P
.PD
defines the prompt to be displayed to the left of the input field.
.PP
\f[B]-fn  \fI<font>\fP\f[R]
.PD 0
.P
.PD
defines the font or font set used.
.PP
\f[B]-nb  \fI<color>\fP\f[R]
.PD 0
.P
.PD
defines the normal background color.
\f[B]#RGB\f[R], \f[B]#RRGGBB\f[R], and X color names are supported.
.PP
\f[B]-nf  \fI<color>\fP\f[R]
.PD 0
.P
.PD
defines the normal foreground color.
.PP
\f[B]-sb  \fI<color>\fP\f[R]
.PD 0
.P
.PD
defines the selected background color.
.PP
\f[B]-sf  \fI<color>\fP\f[R]
.PD 0
.P
.PD
defines the selected foreground color.
.PP
\f[B]-nhb  \fI<color>\fP\f[R]
.PD 0
.P
.PD
defines the normal highlight background color.
.PP
\f[B]-nhf  \fI<color>\fP\f[R]
.PD 0
.P
.PD
defines the normal highlight foreground color.
.PP
\f[B]-shb  \fI<color>\fP\f[R]
.PD 0
.P
.PD
defines the selected highlight background color.
.PP
\f[B]-shf  \fI<color>\fP\f[R]
.PD 0
.P
.PD
defines the selected highlight foreground color.
.PP
\f[B]-v\f[R]
.PD 0
.P
.PD
prints version information to stdout, then exits.
.PP
\f[B]-w  \fI<windowid>\fP\f[R]
.PD 0
.P
.PD
embed into windowid.
.SH USAGE
.PP
dmenu is completely controlled by the keyboard, but this fork has the
\f[B]mousesupport\f[R] patch, heheh.
Items are selected using the arrow keys, page up, page down, home, and
end.
.PP
\f[B]Tab\f[R]
.PD 0
.P
.PD
Copy the selected item to the input field.
.PP
\f[B]Return\f[R]
.PD 0
.P
.PD
Confirm selection.
Prints the selected item to stdout and exits, returning success.
.PP
\f[B]Ctrl-Return\f[R]
.PD 0
.P
.PD
Confirm selection.
Prints the selected item to stdout and continues.
.PP
\f[B]Shift-Return\f[R]
.PD 0
.P
.PD
Confirm input.
Prints the input text to stdout and exits, returning success.
.PP
\f[B]Escape\f[R]
.PD 0
.P
.PD
Exit without selecting an item, returning failure.
.PP
\f[B]Ctrl-Left\f[R]
.PD 0
.P
.PD
Move cursor to the start of the current word
.PP
\f[B]Ctrl-Right\f[R]
.PD 0
.P
.PD
Move cursor to the end of the current word
.PP
\f[B]C-a\f[R]
.PD 0
.P
.PD
Home
.PP
\f[B]C-b\f[R]
.PD 0
.P
.PD
Left
.PP
\f[B]C-c\f[R]
.PD 0
.P
.PD
Escape
.PP
\f[B]C-d\f[R]
.PD 0
.P
.PD
Delete
.PP
\f[B]C-e\f[R]
.PD 0
.P
.PD
End
.PP
\f[B]C-f\f[R]
.PD 0
.P
.PD
Right
.PP
\f[B]C-g\f[R]
.PD 0
.P
.PD
Escape
.PP
\f[B]C-h\f[R]
.PD 0
.P
.PD
Backspace
.PP
\f[B]C-i\f[R]
.PD 0
.P
.PD
Tab
.PP
\f[B]C-j\f[R]
.PD 0
.P
.PD
Return
.PP
\f[B]C-J\f[R]
.PD 0
.P
.PD
Shift-Return
.PP
\f[B]C-k\f[R]
.PD 0
.P
.PD
Delete line right
.PP
\f[B]C-m\f[R]
.PD 0
.P
.PD
Return
.PP
\f[B]C-M\f[R]
.PD 0
.P
.PD
Shift-Return
.PP
\f[B]C-n\f[R]
.PD 0
.P
.PD
Down
.PP
\f[B]C-p\f[R]
.PD 0
.P
.PD
Up
.PP
\f[B]C-u\f[R]
.PD 0
.P
.PD
Delete line left
.PP
\f[B]C-w\f[R]
.PD 0
.P
.PD
Delete word left
.PP
\f[B]C-y\f[R]
.PD 0
.P
.PD
Paste from primary X selection
.PP
\f[B]C-Y\f[R]
.PD 0
.P
.PD
Paste from X clipboard
.PP
\f[B]M-b\f[R]
.PD 0
.P
.PD
Move cursor to the start of the current word
.PP
\f[B]M-f\f[R]
.PD 0
.P
.PD
Move cursor to the end of the current word
.PP
\f[B]M-g\f[R]
.PD 0
.P
.PD
Home
.PP
\f[B]M-G\f[R]
.PD 0
.P
.PD
End
.PP
\f[B]M-h\f[R]
.PD 0
.P
.PD
Up
.PP
\f[B]M-j\f[R]
.PD 0
.P
.PD
Page down
.PP
\f[B]M-k\f[R]
.PD 0
.P
.PD
Page up
.PP
\f[B]M-l\f[R]
.PD 0
.P
.PD
Down
.SH SEE ALSO
.PP
dwm, stest
